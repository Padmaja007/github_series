Task 1 :

1.Git is a distributed version control system which

tracks changes to source code over time. It is a command

line tool that requires an interface to interact with

the world. It creates a local repository to track

changes locally rather than store them on a centralized

server.\
Github is a web based hosting service for Git repository

to bring teams together. It is a graphical interface and

a development platform created for millions of

developers. It is open source which means code is stored

in a centralized server and is accessible to

everybody.2.Git is widely popular due to following

reasons:\
1.Easy Project Management\
2.Increased safety of packages\
3.Effective Team management\
4.Improved code writing\
5.Increased code safety\
6.Easy code hosting 3.Version control is a system that

records changes to a file or set of files over time so

that you can recall specific versions later. It helps to

keep track of changes and keep ever team member working

off the latest version.\
Git is a distributed version control tool (VCS)  that

supports distributed non-linear workflows by providing

data assurance for developing quality software.4.

Similar platforms like Githib:\
1.Source Forge\
2.Apache Allura\
3.BitBucket\
4.Launchpad\
5.AWS Codecommit 5. Github is undoubtedly a valuable

skill to have as a programmer, not only in the

workplace, but also personally. It's the most popular

source code hosting facility out there, and it's still

growing. It let's you save your code online. Allows all

developers of a project to see what changes the other

one has made. It also allows you to discuss issues in

your code with other developers. And that's why I am

interested in learning Github.

Task 2:

1)How git workflows works?There are three main

components of a Git workflow :\
a)Repository : The repository, or repo, is the

"container" that tracks the changes to your project

files. It holds all the commits---a snapshot of all your

files at a point in time---that have been made. You can

access the commit history with the Git log.\
b)Working tree : The working tree, or working directory,

consists of files that you are currently working on. You

can think of a working tree as a file system where you

can view and modify files.\
c)Index : The index, or staging area, is where commits

are prepared. The index compares the files in the

working tree to the files in the repo. When you make a

change in the working tree, the index marks the file as

modified before it is committed.2)What are the different

stages of a git project as a commit, add? a) Untracked:

the file exists, but is not part of git's version

control\
b) Staged: the file has been added to git's version

control but changes have not been committed\
c) Committed: the change has been committed3)Is it

possible to do a git commit before git add,  if you made

any changes. Explain why? No, because you have to

explicitly tell Git which changes you want to include in

a commit before running the "git commit" command. This

means that a file won't be automatically included in the

next commit just because it was changed. Instead, you

need to use the "git add" command to mark the desired

changes for inclusion.4) Why is git diff used ?The diff

command calculates and displays the differences between

two files, and is typically used to investigate the

changes between two versions of the same file.\
Compares the working directory with index, i.e. shows

the changes that are not staged yet.5)Can we leave the

commit message as blank?Yes,  we can leave commit

message blank.  However proper commit messages will make

it easy to understand why a change has been made at a

particular time. With this, maintainers of a project

will easily be able to make changes decades later

because they understand the code.Link to github

repository :

https://github.com/Padmaja007/gitseries_projects.git

Task 3:

1)What is meant by the term fork and clone?A fork is a

copy of a repository. Forking a repository allows you to

freely experiment with changes without affecting the

original project.\
A clone is a Git command line utility which is used to

target an existing repository and create a clone, or

copy of the target repository.2)What are branches in

Github?In Git, branches are a part of everyday

development process. Git branches are effectively a

pointer to a snapshot of your changes. When you want to

add a new feature or fix a bug---no matter how big or how

small---you spawn a new branch to encapsulate your

changes. This makes it harder for unstable code to get

merged into the main code base, and it gives you the

chance to clean up your future's history before merging

it into the main branch.\
A branch represents an independent line of development.

Branches serve as an abstraction for the

edit/stage/commit process. You can think of them as a

way to request a brand new working directory, staging

area, and project history. New commits are recorded in

the history for the current branch, which results in a

fork in the history of the project. The git branch

command lets you create, list, rename, and delete

branches. It doesn't let you switch between branches or

put a forked history back together again. For this

reason, git branch is tightly integrated with the git

checkout and git merge commands.3)What is PR?Whether

you're collaborating on a work assignment with

colleagues or contributing to an open-source project,

chances are that you will be operating in the following

scenario. You make local code changes and then submit

those changes to a remote project maintainer for review

before those changes are implemented, or merged. This is

called a pull request, you are requesting that someone

reviews and approves your changes before they become

final.4)Can we delete the master branch if not Why?Yes

we can delete the master branch however, to make that

happen, you have to tell github not to monitor your

master branch.\
First you delete master in your local clone. To do this

we first make a new branch called placeholder or

similar, and delete master from there:\
git branch placeholder\
git checkout placeholder\
git branch -D masterWe next want to delete the branch on

github. However, if we do this the naive way:\
git push origin :masterWill get an error. That is

because github is looking at the master branch to

provide the web content when you browse that repository.

So we first have to make github look at our placeholder

branch instead, then delete master.First push up the

placeholder branch:\
git checkout placeholder    (if not on placeholder

already)\
git push origin placeholderThen set placeholder to be

the github default branch. Go to the main github page

for your forked repository, and click on the "Admin"

button.There's a "Default branch" dropdown list near the

top of the screen. From there, select placeholder. On

the interface I'm looking at, a green tick appears above

the dropdown list. Now you can do (from the command

line):\
git push origin :master\
and - no master branch.5)How can we delete a branch?

a)Deleting branch locally :Git will not let you delete

the branch you are currently on so you must make sure to

checkout a branch that you are NOT deleting. For

example: git checkout master\
Delete a branch with git branch -d <branch>.\
For example: git branch -d fix/authentication\
The -d option will delete the branch only if it has

already been pushed and merged with the remote branch.

Use -D instead if you want to force the branch to be

deleted, even if it hasn't been pushed or merged yet.\
The branch is now deleted locally.b)Deleting branch

remotely:Here's the command to delete a branch remotely:

git push <remote> --delete <branch>.\
For example: git push origin --delete fix/authentication\
The branch is now deleted remotely.
